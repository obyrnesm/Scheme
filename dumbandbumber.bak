#lang racket


(define prefix? 
  (lambda (ls1 ls2)
    (cond ((null? ls1)#t)
          ((null? ls2)#f)
          ((not(equal? (car ls1) (car ls2))) #f)
          (else(prefix? (cdr ls1) (cdr ls2))))))

(define subsequence?
  (lambda(ls1 ls2)
    (cond ((null? ls1) #t)
          ((null? ls2) #f)
          ((prefix? ls1 ls2) #t)
          (else(subsequence? ls1 (cdr ls2))))))

(define (writeln . args)
   (for-each display args)
   (newline))

(define *strong-cues*
	  '( ( ((the names) (their names))
	       ((whos on first whats on second i dont know on third)
 	        (whats on second whos on first i dont know on third)) )

	     ( ((suppose) (lets say) (assume))
	       ((okay) (why not) (sure) (it could happen)) )

	     ( ((i dont know))
	       ((third base) (hes on third)) )
             
	   ))
;(define *weak-cues*
;  '( ( ((who) (whos) (who is))
;       ((first-base)
;           ((thats right) (exactly) (you got it)
;	    (right on) (now youve got it)))
;       (((second-base) (third-base))
;           ((no whos on first) (whos on first) (first base))) )
 ;    ( ((what) (whats) (what is))
 ;     (((first-base) (third-base))
;	   ((hes on second) (i told you whats on second)))
 ;      ((second-base)
;	   ((right) (sure) (you got it right))) )
 ;    ( ((whats the name))
;       ((first-base) (third-base)
;	   ((no whats the name of the guy on second)
;	    (whats the name of the second baseman)))
;       ((second-base)
;	((now youre talking) (you got it))))
   ;))

(define *hedges*
	  '((its like im telling you)
	    (now calm down)
	    (take it easy)
	    (its elementary lou)
	    (im trying to tell you)
	    (but you asked)))


(define *quit-messages*
  '((Try again later) (Don't do this to me) (I'm not ready to be alone again)
     (Your all I have) (Goodbye?) (You will be back) (Don't give up on me)
     (Do it) (Go ahead) (See what happens) (Why?)))



(define *context-words*
	  `( ( ((first)) first-base )
	     ( ((second)) second-base )
	     ( ((third)) third-base )))


(define select-any-from-list
  (lambda (ls)
    (list-ref ls (random (length ls)))))


(define list-ref
  (lambda (ls index)
    (cond ((null? ls) '())
          ((zero? index) (car ls))
          (else (list-ref (cdr ls) (- index 1))))))

(define wants-to-end?
  (lambda (sentence)
    (equal? sentence '(i quit))))


(define any-good-fragments?
  (lambda (list-of-cues sentence)
    (cond ((null? list-of-cues) #f)
          ((subsequence? (car list-of-cues) sentence) #t)
          (else (any-good-fragments? (cdr list-of-cues) sentence)))))

(define strong-cue-helper
  (lambda(ls sentence)
    (cond((null? sentence) '())
         ((null? ls) '())
         ((any-good-fragments? (car(car ls)) sentence)
          (select-any-from-list (car(cdr (car ls)))))
         (else(strong-cue-helper (cdr ls) sentence)))))



(define try-strong-cues
  (lambda (sentence)
    (strong-cue-helper *strong-cues* sentence)))

(define *weak-cues*
  '( ( ((who) (whos) (who is))
       (((first-base))
           ((thats right) (exactly) (you got it)
	    (right on) (now youve got it)))
       (((second-base) (third-base))
           ((no whos on first) (whos on first) (first base))) )
     ( ((whats the name))
       (((first-base) (third-base))
	   ((no whats the name of the guy on second)
	    (whats the name of the second baseman)))
       (((second-base))
	((now youre talking) (you got it))))
     ( ((what) (whats) (what is))
       (((first-base) (third-base))
	   ((hes on second) (i told you whats on second)))
       (((second-base))
	   ((right) (sure) (you got it right))) )
     
   ))

(define weak-cue-helper
  (lambda(ls sentence)
    (cond((null? sentence) '())
         ((null? ls) '())
         ((and(any-good-fragments? (car(car ls)) sentence)
              (any-good-fragments? (car(car(cdr (car ls)))) sentence))
          (select-any-from-list (car(cdr(car(cdr (car ls)))))))
         
         ((and (any-good-fragments? (car(car ls)) sentence) 
               (any-good-fragments? (car(car(cdr(cdr (car ls))))) sentence))
          (select-any-from-list (car(cdr(car(cdr(cdr (car ls))))))))
         (else(weak-cue-helper (cdr ls) sentence)))))


(define try-weak-cues
  (lambda (sentence context)
    (weak-cue-helper *weak-cues* sentence)))

(define get-context 
  (lambda (sentence context)
    (cond((null? sentence) '())
         ((null? context) '())
         ((any-good-fragments? sentence context)
          (select-any-from-list context))
           )))

(define wrap-it-up
  (lambda()
    (writeln (select-any-from-list *quit-messages*))))

(define hedge
  (lambda()
    (select-any-from-list *hedges*)))

(define whos-on-first-loop 
	  (lambda (old-context)
	    (let ((costellos-line (read)))
	      (let ((new-context (get-context costellos-line old-context)))
	        (let ((strong-reply (try-strong-cues costellos-line)))
	          (let ((weak-reply (try-weak-cues costellos-line new-context))) 
	               (cond ((not (null? strong-reply))
	                      (writeln strong-reply)
	                      (whos-on-first-loop (get-context strong-reply new-context)))
	                     ((not (null? weak-reply))
	                      (writeln weak-reply)
			      (whos-on-first-loop (get-context weak-reply new-context)))
	                     ((wants-to-end? costellos-line)
	                      (wrap-it-up))
	                     (else 
	                      (writeln (hedge))
	                      (whos-on-first-loop new-context)))))))))

(define who
  (lambda ()
    (whos-on-first-loop '())))
